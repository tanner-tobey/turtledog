API Interface LayerThis module is the bridge between BlueBird's declarative api syntax and a high-performance, asynchronous web server.Design RationaleWriting web servers involves a lot of boilerplate (parsing HTTP, routing requests, managing connections). The BlueBird api block abstracts this away, allowing developers to focus purely on the application logic.This runtime module uses a battle-tested, low-level HTTP server library (like Hyper in Rust) as its foundation.Workflow:The bluebirdc compiler parses all api blocks in the source code.It generates code that defines a set of routes and handlers.This generated code calls functions in this runtime module.The runtime starts the async web server and registers the routes. When a request comes in, the runtime invokes the appropriate handler, which in turn executes the user's BlueBird code.This architecture combines the productivity of a high-level framework with the raw performance of a low-level server.Usage ExampleBlueBird Code:api my_app on "0.0.0.0:3000" {
    // The compiler turns this into a route and handler
    // that it registers with the runtime's API layer.
    get "/hello" -> text {
        return "Hello, World!"
    }
}
Rust Implementation (Conceptual):// In bluebird_runtime/src/api/mod.rs
use hyper::{Body, Request, Response, Server};
use hyper::service::{make_service_fn, service_fn};
use std::convert::Infallible;

// The compiler generates a function that calls this.
pub async fn start_server(addr: std::net::SocketAddr) {
    // The make_service_fn closure is called for every connection.
    let make_svc = make_service_fn(|_conn| async {
        Ok::<_, Infallible>(service_fn(route_handler))
    });

    let server = Server::bind(&addr).serve(make_svc);

    if let Err(e) = server.await {
        eprintln!("server error: {}", e);
    }
}

// The compiler generates a router that calls the correct user code.
async fn route_handler(_req: Request<Body>) -> Result<Response<Body>, Infallible> {
    // Routing logic generated by the compiler would go here.
    // For now, it's a simple placeholder.
    Ok(Response::new("Hello from the BlueBird API runtime!".into()))
}
